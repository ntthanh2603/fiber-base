basePath: /api/v1
definitions:
  dto.CreateUserRequest:
    properties:
      avatar:
        example: https://example.com/avatar.jpg
        type: string
      email:
        example: john.doe@example.com
        type: string
      first_name:
        example: John
        maxLength: 50
        type: string
      last_name:
        example: Doe
        maxLength: 50
        type: string
      password:
        example: password123
        minLength: 6
        type: string
      phone:
        example: "+1234567890"
        maxLength: 20
        type: string
      username:
        example: john_doe
        maxLength: 50
        minLength: 3
        type: string
    required:
      - email
      - password
      - username
    type: object
  dto.UserResponse:
    properties:
      avatar:
        example: https://example.com/avatar.jpg
        type: string
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      email:
        example: john.doe@example.com
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      is_active:
        example: true
        type: boolean
      last_name:
        example: Doe
        type: string
      phone:
        example: "+1234567890"
        type: string
      updated_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      username:
        example: john_doe
        type: string
    type: object
  utils.ErrorResponseModel:
    properties:
      error:
        example: Error description
        type: string
      message:
        example: Error
        type: string
      success:
        example: false
        type: boolean
    type: object
  utils.SuccessResponseModel:
    properties:
      data: {}
      message:
        example: Operation completed successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for Fiber Base API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Fiber Base API
  version: "1.0"
paths:
  /users:
    post:
      consumes:
        - application/json
      description: Create a new user with the provided information
      parameters:
        - description: User creation data
          in: body
          name: user
          required: true
          schema:
            $ref: "#/definitions/dto.CreateUserRequest"
      produces:
        - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            allOf:
              - $ref: "#/definitions/utils.SuccessResponseModel"
              - properties:
                  data:
                    $ref: "#/definitions/dto.UserResponse"
                type: object
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: "#/definitions/utils.ErrorResponseModel"
        "409":
          description: Email or username already exists
          schema:
            $ref: "#/definitions/utils.ErrorResponseModel"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/utils.ErrorResponseModel"
      summary: Create a new user
      tags:
        - users
  /users/{id}:
    get:
      consumes:
        - application/json
      description: Get a specific user by their ID
      parameters:
        - description: User ID
          format: uuid
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            allOf:
              - $ref: "#/definitions/utils.SuccessResponseModel"
              - properties:
                  data:
                    $ref: "#/definitions/dto.UserResponse"
                type: object
        "400":
          description: Invalid user ID
          schema:
            $ref: "#/definitions/utils.ErrorResponseModel"
        "404":
          description: User not found
          schema:
            $ref: "#/definitions/utils.ErrorResponseModel"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/utils.ErrorResponseModel"
      summary: Get user by ID
      tags:
        - users
schemes:
  - http
  - https
swagger: "2.0"
